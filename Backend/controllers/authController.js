import User from "../models/User.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import nodemailer from "nodemailer";

////////////////////////////////// LOGIN USER //////////////////////////////////

export const loginUser = async (req, res) => {
  try {
    const { usernameOrEmail, password } = req.body;

    if (!usernameOrEmail || !password) {
      return res
        .status(400)
        .json({ message: "Username or email and password is required" });
    }

    const user = await User.findOne({
      $or: [{ username: usernameOrEmail }, { email: usernameOrEmail }],
    });

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    const passwordIsValid = await bcrypt.compare(password, user.password);
    if (!passwordIsValid) {
      return res.status(401).json({ message: "Wrong password or username" });
    }

    if (!process.env.JWT_SECRET) {
      return res.status(500).json({ message: "JWT_SECRET is not set" });
    }

    const token = jwt.sign(
      { username: user.username, id: user._id.toString() },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    console.log("–¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:", token); // üëà –õ–û–ì –í–ê–ñ–ï–ù!

    res.status(200).json({
      message: "Successfully logged in",
      token,
      user: {
        username: user.username,
        id: user._id,
        profile_image: user.profileImage,
      },
    });
  } catch (error) {
    console.error("Error logging in user:", error);
    res.status(500).json({ message: "Error logging in" });
  }
};

////////////////////////////////// REGISTER USER //////////////////////////////////

export const registerUser = async (req, res) => {
  try {
    console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", req.body); // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å

    const { username, fullName, email, password } = req.body;

    if (!username || !password || !email || !fullName) {
      res
        .status(400)
        .send("Username, email, full name and password are required");
      return;
    }

    const user = await User.findOne({ username });
    if (user) {
      res.status(400).send("User already exists");
      return;
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = await User.create({
      username,
      fullName, // –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ —Å—Ö–µ–º–µ
      email,
      password: hashedPassword,
    });

    res
      .status(201)
      .json({ message: "Successfully registered!", user: newUser });
  } catch (error) {
    console.error("Error registering a user:", error);
    res.status(500).send("Error registering");
  }
};

////////////////////////////////// RESET PASSWORD //////////////////////////////////

export const resetPassword = async (req, res) => {
  try {
    const { usernameOrEmail } = req.body;
    if (!usernameOrEmail) {
      res.status(400).send("Username or email is required");
      return;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await User.findOne({
      $or: [{ username: usernameOrEmail }, { email: usernameOrEmail }],
    });
    if (!user) {
      res.status(404).send("User not found");
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ë—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ nodemailer
    const transporter = nodemailer.createTransport({
      service: "gmail", // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å
      auth: {
        user: process.env.EMAIL, // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –≤ .env
        pass: process.env.EMAIL_KEY, // –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏–ª–∏ App Password
      },
    });

    // –û–ø—Ü–∏–∏ –¥–ª—è –ø–∏—Å—å–º–∞
    const mailOptions = {
      from: "insta_clone@gmail.com", // –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      to: user.email, // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      subject: "Reset password", // –¢–µ–º–∞ –ø–∏—Å—å–º–∞
      text: "<b>Reset your password - </b> <a href='/'>Link</a>", // –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    };

    const info = transporter.sendMail(mailOptions);
    res.status(201).json({
      msg: "Email sent",
      info: info.messageId,
      preview: nodemailer.getTestMessageUrl(info),
    });
  } catch (error) {
    console.error("Error resetting password: ", error);
    res.status(500).send("Error resetting password");
  }
};

////////////////////////////////// Check Access Token //////////////////////////////////

export const checkAccessToken = (req, res) => {
  try {
    if (req.user) {
      res.status(200).json({ message: "Token is valid", username: req.user });
    } else {
      res.status(200).json({ message: "Token is not valid" });
    }
  } catch (error) {
    console.error("Error:" + error);
  }
};
